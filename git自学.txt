1 git config --global user.name  你是谁
2 git config --global user.email 怎么联系你


ls	查看当前目录状态


/*********开始*****************/
//建立一个rrd的目录

git init 	初始化仓库

git status	状态

------------单词
Untracked files		没有跟踪
use "git add" to track	使用 git add 跟踪


-------------------------------

git add .	提交当前所有目录  版本控制

git status	再次查看状态

git commit -m "rrd init"  提交到仓库

/*********所有完事***************/


------------增、删、改 开始--------------------------------------
//理解

创建修改文件 -> 第一次 git status  红色的字体  表明此时在工作区

git add     -> git status	绿色的字体  表明此时在暂存区

git commit -m "rrd init"   -> 来到了版本库 



git rm read.txt		删除文件

git status	->	绿色的read.txt 表示刚刚删除了

git commit -m "del read.txt"


------------增、删、改 完成--------------------------------------


/*************添加远程服务器->开始*******************************/
D盘
github上建立一个新的仓库 ->  lianshou

把刚刚建立的rrd目录里面的文件推送到远程仓库

git push https://github.com/452138222/lianshou.git master -> 成功
//解释：把本地主要的分支推到 这个地址上
而 git push origin master  中origin是这个远程地址的简写
 

/*
给远程仓库添加一个‘lianshou’的别名推送上去	remote -> 远程

git remote add lianshou https://github.com/452138222/lianshou.git

修改文件内容之后->  git push lianshou master  ->  推送成功


*/

/*************添加远程服务器->结束*******************************/


/*****************团队合作->开始*******************/

说明:
1. 老大在D盘建立了一个‘rrd’的项目，-> 在远程地址建立了一个'lianshou'的仓库 -> 然后把项目 git push https://github.com/452138222/lianshou.git master 到远程仓库了 
2. 老大在那个仓库里面建立了一个分支，取名为'火夫'(也就是公司的一个员工), 火夫要参与这个项目，于是，在E盘建立了一个文件夹'lianshou'， -> 打开git  输入git clone https://github.com/452138222/lianshou.git 将远程仓库'lianshou'中的文件全部下载下来 ->
3. 火夫创建index.html ...  进行项目开发   最后 -> git push https://github.com/452138222/lianshou.git master 这个远程仓库中 

4.此时，远程仓库上的数据已经更新，老大在D盘也需要更新这些数据，于是该把 远程仓库的数据 再拉下来 git pull lianshou master  -> 远程仓库上更新的数据就拉倒了D盘rrd项目中了

5.也就是这样，老大和火夫就在一起愉快的开发项目了


/*****************团队合作->开始*******************/




/********************细聊git1**********************/

git log 查看版本日志

git log --pretty=oneline  版本日志都在一行上
055c155ac8c580177fed30983e067bc10893e367 (HEAD -> master, lianshou/master) 生成配置文件 火夫登陆
5366ca20ccab0cb5a1e7948e4aba3f0a2eb9e9de lianshou bieming
2b5e17f178a50f2364a0f7c1b9e4027d3107e570 add read
116e6deb43d9fff9e97309373eeba01cd5fe2938 modify
9fcf9bd44fe804a1708f99b305942f7d9c0ff7dd rrd init


//HEAD 代表当前最新的版本
切换版本  比如 切换到最初 初始化的版本 
 git reset --hard  HEAD^^^^     //第上到下第四个 所有就有四个^    -----不推荐
HEAD is now at 9fcf9bd rrd init  ->这就回到最初的了

推荐 用版本号
git reset --hard 2b5e1
HEAD is now at 2b5e17f add read   -> 于是 回到这个状态了


git reflog    ->   回看每次操作的路劲
2b5e17f (HEAD -> master) HEAD@{0}: reset: moving to 2b5e
9fcf9bd HEAD@{1}: reset: moving to HEAD^^^^
055c155 (lianshou/master) HEAD@{2}: pull lianshou master: Fast-forward
5366ca2 HEAD@{3}: commit: lianshou bieming
2b5e17f (HEAD -> master) HEAD@{4}: commit: add read
116e6de HEAD@{5}: commit: modify
9fcf9bd HEAD@{6}: commit (initial): rrd init

//解释  这样就可以知道操作过哪些版本 用git reset --hard 116e6de  就可以切换到任意版本


/********************细聊git2********** ************/

分支管理

git branch    查看分支
1.切换到最新版本
2.git branch wechat	创建微信分支

git branch	查看分支
* master
  wechat

3.git checkout wechat	切换到微信这个分支  
Switched to branch 'wechat'

此时 微信分支和主分支内容是一样的 
现在 已经在微信分支上了，修改内容 ->  ...

4.git status   -> 红色

十万火急的项目来了 必须离开  现在这个微信项目需要先保存起来，着手去解决有bug的项目

5.git add .
  git commit -m "wechat todo"
项目已经提交到wechat分支的仓库里面了


6.git checkout master  	切换到主分支
现在暂时就和微信分支没有关系了 
咱的目的应该是去该bug了  不过先建立一个ali分支

7.git branch ali
创建ali分支


8.git checkout ali	切换到ali分支
然后进行bug修改  修改增加内容...
修改成功后
应该把ali分支上的内容推(合并)到master上


8.git add.
  git commit -m "ali bug fixed done"  提交到仓库

9.git checkout master
现在应该把ali修改的bug合并到master

10.git merge ali
此时此刻，ali修改好的bug已经和主分支内容合并在一起了
bug修复完毕之后，继续回去做微信的内容

11.git checkout wechat
继续进行微信的开发
写程序、加文件....
做完以后添加到仓库

12. git add .
    git commit -m


13.git checkout master    切换到主分支 将做好的微信项目合并到主分支上

14.git merge wechat 
这样就将做好的微信项目合并到主分支上了
此时主分支既有修复好的bug又有做好的微信项目
然而，合并好的主分支可能有一些东西需要删除，需要打开'冲突'的文件删除，再次提交到仓库

15. git add .
    git commit -m '修复alibug 和 完成微信项目'

此时，两个分支都已经完成任务了


git branch -d dev	删除分支
Deleted branch dev (was 412926b)


/********************细聊git3********** ************/

远程仓库管理	remote -> 远程

1.git remote -v	查看远程服务器名
lianshou        https://github.com/452138222/lianshou.git (fetch)
lianshou        https://github.com/452138222/lianshou.git (push)
远程仓库名字叫lianshou


2.git remote remove lianshou  将lianshou这个仓库别名删了  


3.git remote -v
空  表示远程仓库别名已经删除完毕，不过远程仓库还在

4.git remote add origin https://github.com/452138222/lianshou.git
再次给远程仓库添加一个别名'origin'

5.git remote -v
origin  https://github.com/452138222/lianshou.git (fetch)
origin  https://github.com/452138222/lianshou.git (push)
名字加回来了

6.git push origin master
把本地的master往远程仓库推

 


/********************细聊git4********** ************/

配置公钥  不用输入账号密码

配置后https的地址就不能用了
走的是SSD


1.git remote -v
origin  https://github.com/452138222/lianshou.git (fetch)
origin  https://github.com/452138222/lianshou.git (push)

2.git remote remove origin


3.git remote -v
空
这时候，再次添加地址 添加的是SSH了

4.git remote add origin git@github.com:452138222/lianshou.git


5.git remote -v
origin  git@github.com:452138222/lianshou.git (fetch)
origin  git@github.com:452138222/lianshou.git (push)
此时还不够，还要配置公钥
本地生成一把钥匙 和一把锁 那把锁在远程登记一下，下次提交，把钥匙送过去，锁恰好在那边，就能打开


6.ssh-keygen -t rsa -C "452138222@qq.com"  	//后面的email 是第一次全局创建时候的email
剩下一路回车
...
/c/Users/Administrator/.ssh/id_rsa.pub.
...

.id_rsa是私钥   .id_rsa.pub是公钥  
可以想象成一把钥匙一把锁
私钥是钥匙  ->  公钥是一把锁    公钥在远程仓库设置


现在，再去项目中修改文件内容 'no password'
7.git status
  git add .
  git commit -m "测试公钥"

8.git push origin master
这样push的时候就不用设置密码了









/********************2017-9-13 by Ch...********** ************/